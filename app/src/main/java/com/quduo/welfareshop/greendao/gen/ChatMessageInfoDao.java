package com.quduo.welfareshop.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.quduo.welfareshop.ui.friend.entity.ChatMessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_INFO".
*/
public class ChatMessageInfoDao extends AbstractDao<ChatMessageInfo, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_INFO";

    /**
     * Properties of entity ChatMessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OtherUserId = new Property(1, long.class, "otherUserId", false, "OTHER_USER_ID");
        public final static Property OtherNickName = new Property(2, String.class, "otherNickName", false, "OTHER_NICK_NAME");
        public final static Property MessageType = new Property(3, int.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property MessageContent = new Property(4, String.class, "messageContent", false, "MESSAGE_CONTENT");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
        public final static Property AudioTime = new Property(6, int.class, "audioTime", false, "AUDIO_TIME");
    }


    public ChatMessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OTHER_USER_ID\" INTEGER NOT NULL ," + // 1: otherUserId
                "\"OTHER_NICK_NAME\" TEXT," + // 2: otherNickName
                "\"MESSAGE_TYPE\" INTEGER NOT NULL ," + // 3: messageType
                "\"MESSAGE_CONTENT\" TEXT," + // 4: messageContent
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"AUDIO_TIME\" INTEGER NOT NULL );"); // 6: audioTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOtherUserId());
 
        String otherNickName = entity.getOtherNickName();
        if (otherNickName != null) {
            stmt.bindString(3, otherNickName);
        }
        stmt.bindLong(4, entity.getMessageType());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(5, messageContent);
        }
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getAudioTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOtherUserId());
 
        String otherNickName = entity.getOtherNickName();
        if (otherNickName != null) {
            stmt.bindString(3, otherNickName);
        }
        stmt.bindLong(4, entity.getMessageType());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(5, messageContent);
        }
        stmt.bindLong(6, entity.getTime());
        stmt.bindLong(7, entity.getAudioTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageInfo readEntity(Cursor cursor, int offset) {
        ChatMessageInfo entity = new ChatMessageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // otherUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // otherNickName
            cursor.getInt(offset + 3), // messageType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageContent
            cursor.getLong(offset + 5), // time
            cursor.getInt(offset + 6) // audioTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOtherUserId(cursor.getLong(offset + 1));
        entity.setOtherNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessageType(cursor.getInt(offset + 3));
        entity.setMessageContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
        entity.setAudioTime(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
